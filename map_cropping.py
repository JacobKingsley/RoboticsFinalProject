# -*- coding: utf-8 -*-
"""map_cropping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eb8uSR6CjfmgAE4q-JYEMbzDe4MKaJ0d
"""

#!/usr/bin/env python

# METHOD FOR CROPPING MAP TO NEW ORIGIN

import yaml
from PIL import Image
import math

def calc_bounds(map_img):

  # set the minimum x and y ranges
  x_min = map_img.size[0]
  y_min = map_img.size[1]

  # set the other ends of the x and y ranges
  x_end = 0
  y_end = 0

  # load the image
  picture = map_img.load()

  for x in range(map_img.size[0]):
    for y in range(map_img.size[1]):
        val = picture[x, y]
        if val != 205:  # not unknown?
            x_min = min(x, x_min)
            x_end = max(x, x_end)
            y_min = min(y, y_min)
            y_end = max(y, y_end)
  
  return x_min, x_end, y_min, y_end

def compute_new_origin_for_crop(map_img, bounds, resolution, origin):

  ox = origin[0]
  oy = origin[1]
  o_theta = origin[2]

  # compute the change in origin position from the point in the lower left corner
  dx = bounds[0] * resolution
  dy = (map_img.size[1] - bounds[3]) * resolution #??

  # rotate by theta
  new_ox = ox + dx * math.cos(o_theta) - dy * math.sin(o_theta)
  new_oy = oy + dx * math.sin(o_theta) + dy * math.cos(o_theta)

  return [new_ox, new_oy, o_theta]


def crop_map(priori_map):
  map_data = yaml.safe_load(priori_map)


  crop_yaml = "croppedmap.yaml"
  crop_img = "croppedmap.pgm"

  map_image_file = map_data["image"]
  resolution = map_data["resolution"]
  origin = map_data["origin"]

  map_image = Image.open(map_image_file)

  bounds = calc_bounds(map_image)

  # left, upper, right, lower
  cropped_image = map_image.crop((bounds[0], bounds[2], bounds[1] + 1, bounds[3] + 1))

  cropped_image.save(crop_img)
  map_data["image"] = crop_img
  map_data["origin"] = compute_new_origin_for_crop(map_image, bounds, resolution, origin)

  with open(crop_yaml, "w") as f:
    yaml.dump(map_data, f)